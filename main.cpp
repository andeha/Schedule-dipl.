/*  main.cpp | Conversationalism, the occasional interrupt and state possibly-maybe. */

#include <experimental/coroutine>

/* xcrun clang -g -std=c++2a -fcoroutines-ts -fno-exceptions -lc++ main.cpp */

namespace coro = std::experimental; typedef int ‚Ñï;
#define co‚Çãawait co_await /* Suspend and 'do enter' a called. A‚Ä§ùò¨‚Ä§a 'co_‚Å±task' and 'co_op‚Çãschedule'. */
#define co‚Çãyield co_yield /* Suspend and return result. ùòä‚Ä§ùòß Scandianvian 'f√∂rledande': 'co_notify' and 'co_emit'. */
#define co‚Çãreturn co_return /* Complete execution and return value. */

#pragma mark - The 'promise' type and the 'awaitable' type:

struct void‚Çãreturn‚ÇÅ {
  struct promise_type {
   auto initial_suspend() { return coro::suspend_never(); }
   auto final_suspend() { return coro::suspend_never(); }
   auto return_void() { return void‚Çãreturn‚ÇÅ(); }
   auto get_return_object() { return void‚Çãreturn‚ÇÅ(); }
   void unhandled_exception() { /* throw; */ }
  };
};

struct int‚Çãreturn‚ÇÅ { /* typedef coro::coroutine_handle<promise_type> Handle; 
  
  Handle coroutine; int‚Çãreturn‚ÇÅ(Handle routine): coroutine(routine) { } */
  
  struct promise_type { int cached=-1; 
    auto initial_suspend() { return coro::suspend_never(); }
    auto final_suspend() { return coro::suspend_never(); }
    /* auto get_return_object() { Handle::from_promise(*this) } */
    auto get_return_object() { return int‚Çãreturn‚ÇÅ(cached); }
    void return_value(int expr) { cached=expr; }
    void unhandled_exception() { /* throw; */ }
    /* Box-expression-before-transmitting-via-yield: */
    auto yield_value(int expr) { cached=expr; return coro::suspend_always(); }
    /* auto yield_value(int‚Çãreturn‚ÇÅ expr) { return coro::suspend_never(); } */
  } inner; /* Submit a coroutine result through this type. */
  
  int‚Çãreturn‚ÇÅ(int reference) { inner.cached = reference; }
  
  constexpr bool await_ready() const noexcept { return true; }
  constexpr void await_suspend(coro::coroutine_handle<> handle) const noexcept { }
  /* constexpr ‚Ñï await_resume() const noexcept { return coroutine.promise().cached; } */
  constexpr ‚Ñï await_resume() const noexcept { return inner.cached; }
  /* ‚¨∑ Awaitable concept. */
};

void‚Çãreturn‚ÇÅ first‚Çãcoroutine() { printf("first-coroutine\n"); co_return; }

int‚Çãreturn‚ÇÅ
inner‚Çãcoroutine()
{
   printf("inner-coroutine\n");
   co‚Çãyield 5; co‚Çãyield 7; co‚Çãyield 9;
   co‚Çãreturn 11;
}

int‚Çãreturn‚ÇÅ second‚Çãcoroutine()
{
   printf("second-coroutine\n");
   for (int i=0; i<4; ++i) { ‚Ñï y = co‚Çãawait inner‚Çãcoroutine(); printf("yield-y = %d\n", y); }
   co‚Çãreturn 13;
}

/* promise‚Çãconst‚Çãchar‚Çã‚Åë tamagotchi() { }
promise‚ÇãUnicodes tamagotchi(void (^tellus)(Unicodes ‚Åª¬πcheek)) { } */

#pragma mark - and the main function:

/* int‚Çãreturn‚ÇÅ coroutine‚Çãserver() {
  tcpconnection conn = co‚Çãawait connect();
  for (;;) { int bytes = co‚Çãawait conn.read(); }
  co_return 42;
} */

int
main(
  int argc, 
  const char * argv[]
)
{
   void‚Çãreturn‚ÇÅ x = first‚Çãcoroutine();
   int‚Çãreturn‚ÇÅ y = second‚Çãcoroutine();
   /* printf("returned-y = %d\n", y.coroutine.promise().cached); */
   printf("returned-y = %d\n", y.inner.cached);
   return 0;
}


